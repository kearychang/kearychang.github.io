<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://127.0.0.1:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="http://127.0.0.1:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://127.0.0.1:4000/" rel="alternate" type="text/html" /><updated>2018-11-15T16:18:51-05:00</updated><id>http://127.0.0.1:4000/</id><title type="html">Keary Chang</title><subtitle></subtitle><entry><title type="html">BCNF/3NF Generator</title><link href="http://127.0.0.1:4000/!!!-moon-theme/" rel="alternate" type="text/html" title="BCNF/3NF Generator" /><published>2018-11-14T00:00:00-05:00</published><updated>2018-11-14T00:00:00-05:00</updated><id>http://127.0.0.1:4000/!!!-moon-theme</id><content type="html" xml:base="http://127.0.0.1:4000/!!!-moon-theme/">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kearychang/kearychang.github.io/master/assets/post-project/bcnf-3nf.png&quot; alt=&quot;BCNF/3NF Generator Homepage&quot; /&gt;&lt;/p&gt;

&lt;center&gt;Decompose your table to BCNF/3NF format.&lt;/center&gt;

&lt;p&gt;This &lt;a href=&quot;https://kearychang.github.io/BCNF-3NFgenerator/&quot;&gt;project&lt;/a&gt; was to implement 2 algorithms for breaking up a table so would be in Boyce Codd Normal Form or 3 Normal Form. When you put all your attributes in a single table, you get&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;redundancies&lt;/li&gt;
  &lt;li&gt;deletion anomalies&lt;/li&gt;
  &lt;li&gt;update anomalies&lt;/li&gt;
  &lt;li&gt;insertion anomalies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To avoid this, we decompose our table. This has to be done properly so the original information is retrieved, meaning there is no loss or extraneous information.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Number of attributes in your table (&amp;lt;=10)&lt;/li&gt;
  &lt;li&gt;Functional Dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decomposed Tables&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kearychang/kearychang.github.io/master/assets/post-project/bcnf-3nf2.png&quot; alt=&quot;Output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More indepth tutorial is on my &lt;a href=&quot;https://github.com/kearychang/BCNF-3NFgenerator/blob/master/README.md&quot;&gt;Readme&lt;/a&gt;.
The site walks you through the algorithm and intermediate steps.
Source code is public so you can study its implementation &lt;a href=&quot;https://github.com/kearychang/BCNF-3NFgenerator/blob/master/fd.js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="frontend" /><category term="algorithm" /><summary type="html">Decompose your table to BCNF/3NF format.</summary></entry><entry><title type="html">Some Notes on Languages (CS)</title><link href="http://127.0.0.1:4000/language-theory/" rel="alternate" type="text/html" title="Some Notes on Languages (CS)" /><published>2018-11-05T00:00:00-05:00</published><updated>2018-11-05T00:00:00-05:00</updated><id>http://127.0.0.1:4000/language-theory</id><content type="html" xml:base="http://127.0.0.1:4000/language-theory/">&lt;h3 id=&quot;finite-automata&quot;&gt;Finite Automata&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Alphabet&lt;/strong&gt; is a set of &lt;strong&gt;characters&lt;/strong&gt;. &lt;strong&gt;Strings&lt;/strong&gt; are made from sequences of &lt;strong&gt;characters&lt;/strong&gt;.
&lt;strong&gt;Language&lt;/strong&gt; is a set of &lt;strong&gt;strings&lt;/strong&gt;. The &lt;strong&gt;closure&lt;/strong&gt; is all possible &lt;strong&gt;strings&lt;/strong&gt;. A &lt;strong&gt;language&lt;/strong&gt; is a subset of the &lt;strong&gt;closure&lt;/strong&gt;. To determine if a &lt;strong&gt;string&lt;/strong&gt; is valid in your &lt;strong&gt;language&lt;/strong&gt;, we test it in a mathematical machine, called the &lt;strong&gt;finite automaton&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rules&quot;&gt;Rules&lt;/h3&gt;
&lt;p&gt;There are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;starting states&lt;/li&gt;
  &lt;li&gt;accepting states&lt;/li&gt;
  &lt;li&gt;non-accepting states&lt;/li&gt;
  &lt;li&gt;state transitions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You start from the starting state and “consume” one character from your string, reading left to right. When the string has been consumed and you end on an accepting string, the string is a member of your language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DFA&lt;/strong&gt; or deterministic finite automatons are the simplest kind.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1 starting state&lt;/li&gt;
  &lt;li&gt;1 possible transition per character&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A language is &lt;strong&gt;regular&lt;/strong&gt; if it can be expressed as an &lt;strong&gt;DFA&lt;/strong&gt;.
A cool feature is that the complement of the &lt;strong&gt;language&lt;/strong&gt; can also be expressed as an &lt;strong&gt;DFA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NFA&lt;/strong&gt; or non-deterministic finite automatons have the property that&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;more than 1 possible transition per character&lt;/li&gt;
  &lt;li&gt;epsilon-transitions (no character consumed)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To evaluate if a string is accepted, among the possible state transitions,
at least one must end on an accepting state. Some questions are&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;can any problem solvable by &lt;strong&gt;NFA&lt;/strong&gt; be solved by &lt;strong&gt;DFA&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;can any problem solved by &lt;strong&gt;NFA&lt;/strong&gt; be solved efficiently by &lt;strong&gt;DFA&lt;/strong&gt;?
All &lt;strong&gt;NFA&lt;/strong&gt; can be expressed as &lt;strong&gt;DFA&lt;/strong&gt;. Efficiency varies between automatons.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A way of stating this is - is there a universe where this sequence of actions leads to the desired outcome?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;nfa---dfa&quot;&gt;NFA -&amp;gt; DFA&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Subset Construction
Each state in &lt;strong&gt;DFA&lt;/strong&gt; corresponds to set of states in &lt;strong&gt;NFA&lt;/strong&gt;.
Start state in &lt;strong&gt;NFA&lt;/strong&gt; is start state in &lt;strong&gt;DFA&lt;/strong&gt; plus all epsilon transitions.
The transition from some initial state from some character is set of all reachable states, including epsilon transitions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Regular Languages&lt;/strong&gt;
L1 L2 are languages. Then &lt;strong&gt;regular languages&lt;/strong&gt; have the property that&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Complement L1 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;Invert all accepting and non-accepting states and direction of transitions&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;L1 union L2 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;Starting with a new starting state and add epsilon transitions to all starting states in L1 and L2&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;L1 intersection L2 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;This is equivalent to the complement of the union of the complements of L1 and L2&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Concatenation L1 L2 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;Add epsilon transition from all L1 accepting states to all L2 starting states&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Closure L1 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;Language exponentiation&lt;/strong&gt; is just concatenation of language with itself
Just add an epsilon transition from all accepting states to starting states&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;e.g. Noun = {} Verb = {} Article = {}, ArticleNounVerbNoun is a sentence made from concatenation of other languages.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;regular-expressions&quot;&gt;Regular Expressions&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Atomic Regular Expression
    &lt;blockquote&gt;
      &lt;p&gt;null, { a }, { epsilon }&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Compound Regular Expression
    &lt;blockquote&gt;
      &lt;p&gt;.
R*
R+
R?
AB
A|B
A{4}&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;thompsons-algorithm&quot;&gt;Thompson’s Algorithm&lt;/h3&gt;
&lt;p&gt;Regex matchers convert regular expressions into NFA, then DFAs.&lt;/p&gt;

&lt;p&gt;The theorem is that if a language is regular, there is a regular expression for it.
Imagine a transition that is a regular expression, rather than a character.
If we can convert NFA to regular expression, we can read that off it.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Add epsilon transitions to start and accepting states&lt;/li&gt;
  &lt;li&gt;Eliminate intermediate states between start and accepting states using properties of regular languages&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;transformation&quot;&gt;Transformation&lt;/h3&gt;
&lt;p&gt;DFA - (direct conversion) -&amp;gt; NFA - (state elimination) -&amp;gt; Regex
Regex - (Thompson’s Algorithm) -&amp;gt; NFA - (subset construction) -&amp;gt; DFA&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;nonregular-language&quot;&gt;Nonregular Language&lt;/h3&gt;

&lt;h3 id=&quot;context-free-grammar&quot;&gt;Context Free Grammar&lt;/h3&gt;
&lt;p&gt;So regex matches strings and automata accepts strings in the language. CFGs is a different way to define class of languages.
It has these 4 objects.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;nonterminal symbols&lt;/li&gt;
  &lt;li&gt;terminal symbols&lt;/li&gt;
  &lt;li&gt;production rules - how to convert nonterminal to string of terminal and nonterminal&lt;/li&gt;
  &lt;li&gt;start symbol (LHS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E -&amp;gt; int
E -&amp;gt; E Op E
E -&amp;gt; ( E )
Op -&amp;gt; + - * /&lt;/p&gt;

&lt;p&gt;CFG is the set of strings derivable from the starting symbol.
Derivation involve replacing nonterminals with the RHS of the rules of production.
It is a &lt;strong&gt;context free language&lt;/strong&gt; iff there is a CFG for it.
Every &lt;strong&gt;regular language&lt;/strong&gt; is &lt;strong&gt;context free&lt;/strong&gt; since the latter is a superset of the former.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parse Trees&lt;/strong&gt;
This is a tree encoding steps of derivation. Each internal node is nonterminal and each leaf node is terminal.
&lt;strong&gt;Parsing&lt;/strong&gt; involves finding a &lt;strong&gt;parse tree&lt;/strong&gt; for that string, often done in compilation.
A problem that can arise is &lt;strong&gt;ambiguity&lt;/strong&gt; when there is a string with at least 2 &lt;strong&gt;parse trees&lt;/strong&gt;.
One way to resolve this is to use operator precedence.&lt;/p&gt;</content><category term="thought" /><summary type="html">A Quick Review of Automata, Regular Language, Regex and CFG</summary></entry><entry><title type="html">Github Pages with Jekyll Notes</title><link href="http://127.0.0.1:4000/github-pages/" rel="alternate" type="text/html" title="Github Pages with Jekyll Notes" /><published>2018-11-05T00:00:00-05:00</published><updated>2018-11-05T00:00:00-05:00</updated><id>http://127.0.0.1:4000/github-pages</id><content type="html" xml:base="http://127.0.0.1:4000/github-pages/">&lt;h1 id=&quot;lets-create-a-personal-website-on-github&quot;&gt;Let’s Create a Personal Website on Github&lt;/h1&gt;
&lt;p&gt;Most professionals have a personal website. It showcases your CV, portfolio, hobbies and personality. It’s a more intimate presentation of yourself to prospective employers, rather than submitting flavourless cover letter and resumes.&lt;/p&gt;

&lt;p&gt;There are numerous web hosts. A popular one is Github for personal websites. The default domain name is &lt;code class=&quot;highlighter-rouge&quot;&gt;$githubaccount/github.io&lt;/code&gt; so it is easy to remember. This is just a web server so don’t try to use it to host a web app that connects to DB or as an application server.&lt;/p&gt;

&lt;p&gt;Github Pages comes with support for Jekyll. This is a framework which makes it simple to reuse common HTML elements such as header and navbars across different pages of your website.
It comes with simple themes and you can use Markdown instead of HTML.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Have MinGW installed along with MSYS and the base packages&lt;/li&gt;
  &lt;li&gt;Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\MinGW&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\MinGW\1.0&lt;/code&gt; are added to PATH environment variable.&lt;/li&gt;
  &lt;li&gt;Install Ruby v2.4.0 or higher (the developer edition)&lt;/li&gt;
  &lt;li&gt;Run the command &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;gem install jekyll bundler&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create a repo &lt;code class=&quot;highlighter-rouge&quot;&gt;$domain_name.github.io&lt;/code&gt; in Github&lt;/li&gt;
  &lt;li&gt;That URL should work now&lt;/li&gt;
  &lt;li&gt;There is a &lt;code class=&quot;highlighter-rouge&quot;&gt;\_config.yml&lt;/code&gt; file which has line theme: $var&lt;/li&gt;
  &lt;li&gt;Look for the Jekyll theme you like and set that to $var&lt;/li&gt;
  &lt;li&gt;Gem file is Ruby’s equivalent to package.json in npm. It indicates project dependencies.&lt;/li&gt;
  &lt;li&gt;If it isn’t there, create one. Make sure you use char ending UTF-8. Copy this into the file.
source ‘https://rubygems.org’
gem ‘github-pages’, group: :jekyll_plugins
Then add gem “$JEKYLL THEME$ to the last line.&lt;/li&gt;
  &lt;li&gt;Run command &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;bundle install&lt;/code&gt; to install it locally&lt;/li&gt;
  &lt;li&gt;Run command &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;bundle exec jekyll serve&lt;/code&gt; to host locally&lt;/li&gt;
  &lt;li&gt;It will be on &lt;strong&gt;http://localhost:4000&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are some themes I found.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pages-themes/minimal&quot;&gt;Minimal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Gaohaoyang/gaohaoyang.github.io&quot;&gt;Gaohaoyang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/TaylanTatli/Moon/&quot;&gt;Moon&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;making-the-website&quot;&gt;Making the Website&lt;/h2&gt;
&lt;p&gt;First, you need to know that Github Pages allows certain parameters and locks others in the &lt;code class=&quot;highlighter-rouge&quot;&gt;\_config.yml&lt;/code&gt; from being modified. It is specified &lt;a href=&quot;https://help.github.com/articles/configuring-jekyll/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;liquid&quot;&gt;Liquid&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt; - where to output content&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{ page.title }}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; - logic and control flow&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{٪ if page.show_sidebar ٪}
...
{٪ endif ٪}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Filters&lt;/strong&gt; - modifies output of Objects&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{{ &quot;hi&quot; | capitalize }}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;front-matter&quot;&gt;Front Matter&lt;/h2&gt;
&lt;p&gt;This is YAML snippet enclosed between triple dashes at top of file.
It is used to set variables for page.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
var: 5 
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Front matter variables can be referenced by &lt;code class=&quot;highlighter-rouge&quot;&gt;page.var&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;layout&quot;&gt;Layout&lt;/h2&gt;
&lt;p&gt;These are templates that wrap around your content. You call them to avoid repeating yourself.
They are in directory &lt;code class=&quot;highlighter-rouge&quot;&gt;\_layouts&lt;/code&gt;. To determine where it wraps the body, 
wrap &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. Then assign value of layout in front matter to file name of layout.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;layout: default
title: Home
---
{{ &quot;hello world&quot; | upcase }}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To use markdown, create a file with extension &lt;em&gt;.md&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;includes&quot;&gt;Includes&lt;/h2&gt;
&lt;p&gt;We don’t want to repeat ourselves. Code we refer is inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;\_includes&lt;/code&gt; directory.
Html or Markdown can be used from &lt;strong&gt;includes&lt;/strong&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;٪include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;navigation.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
One of Jekyll’s useful &lt;em&gt;variables&lt;/em&gt; is page.url where you can check if each link is the current page.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;data-file&quot;&gt;Data File&lt;/h2&gt;
&lt;p&gt;Jekyll supports loading CVS, JSON, YAML files inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;\_data&lt;/code&gt; directory.
YAML is used to store array of navigation items.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Home&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Home&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;About&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/about.html&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;world&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can refer to &lt;strong&gt;data files&lt;/strong&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;site.data.navigation&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
{٪ for item in site.data.navigation ٪}
  a href=&quot;{{ item.link }}&quot; {٪ if page.url == item.link ٪} 
  style=&quot;color: red;&quot;{٪ endif ٪}&amp;gt;
  {{ item.name }}
  a&amp;gt;
{٪ endfor ٪}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;assets&quot;&gt;Assets&lt;/h2&gt;
&lt;p&gt;CSS, JS, images and other asset are often placed in the &lt;strong&gt;asset&lt;/strong&gt; directory. 
Inline styling is not best practice so we use CSS. 
Let’s create a SASS file at &lt;code class=&quot;highlighter-rouge&quot;&gt;/assets/css/styles.scss&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
---
@import &quot;@main&quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This tells it to look for &lt;code class=&quot;highlighter-rouge&quot;&gt;_sass\main.scss&lt;/code&gt;. Within your layout, create a tag element that loads your SASS file.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://127.0.0.1:4000/assets/css/main.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;blogging&quot;&gt;Blogging&lt;/h3&gt;
&lt;p&gt;Jekyll stores blog posts in folder &lt;strong&gt;_posts&lt;/strong&gt;. These are .md and accessed by &lt;strong&gt;site.posts&lt;/strong&gt;.
There is layout and author values.  The post layout outputs title, date, author and content body.
This is then wrapped by the default layout. Create &lt;code class=&quot;highlighter-rouge&quot;&gt;blog.html&lt;/code&gt; in your root folder.&lt;/p&gt;

&lt;p&gt;The filename must be in format &lt;code class=&quot;highlighter-rouge&quot;&gt;2018-08-21-apples.md&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title: &quot;Github Pages with Jekyll Notes&quot;
date: 2018-11-05
excerpt: &quot;Setting up Github Pages and quick rundown of Jekyll&quot;
tags: [thought]
comments: true
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Remember to add this to main navigation in &lt;code class=&quot;highlighter-rouge&quot;&gt;/_data/navigation.yml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: Blog
  link: /blog.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><category term="thought" /><summary type="html">Setting up Github Pages and quick rundown of Jekyll</summary></entry><entry><title type="html">Reflections on Lessons working with in SemanticUI, JS</title><link href="http://127.0.0.1:4000/reflections/" rel="alternate" type="text/html" title="Reflections on Lessons working with in SemanticUI, JS" /><published>2018-11-02T00:00:00-04:00</published><updated>2018-11-02T00:00:00-04:00</updated><id>http://127.0.0.1:4000/reflections</id><content type="html" xml:base="http://127.0.0.1:4000/reflections/">&lt;p&gt;I really &lt;strong&gt;really&lt;/strong&gt; like the appearance of SemanticUI. Bootstrap is overused. You can always customize,
but they don’t make it as easy to. Let’s give a quick rundown of SemanticUI. 
Comparatively, SemanticUI classifies its &lt;strong&gt;components&lt;/strong&gt; as&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;global - CSS attributes shared across all of SemanticUI, e.g. color, font size, spacing&lt;/li&gt;
  &lt;li&gt;elements - individual UI elements, e.g. message, button, input&lt;/li&gt;
  &lt;li&gt;collections - groups of elements, e.g. form, grid, menu, table&lt;/li&gt;
  &lt;li&gt;views&lt;/li&gt;
  &lt;li&gt;modules - describes how elements look and act, e.g. dropdowns, modals&lt;/li&gt;
  &lt;li&gt;behaviors - descriptions about how page elements should act, e.g. form validation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I did&lt;/h3&gt;

&lt;p&gt;I decided to try out SemanticUI on a small website project that implements Bernstein’s algorithm
for normalization of a DB schema. This is a sequence of how I built it so far&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Wireframe and create container&lt;/li&gt;
  &lt;li&gt;Create a SemanticUI grid and put component inside columns&lt;/li&gt;
  &lt;li&gt;There are 4 sections: header, description, steps and configuration&lt;/li&gt;
  &lt;li&gt;Header consists of title with segment separating it from description&lt;/li&gt;
  &lt;li&gt;Description consists of nested grid with 2x2 resizable explanation of the algorithm&lt;/li&gt;
  &lt;li&gt;Steps is a row of 3 buttons where you toggle between steps, changing the view of description and configuration&lt;/li&gt;
  &lt;li&gt;Configuration is a series of forms (input, textarea) that users enter and view information about their schema&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;my-installation-of-semanticui&quot;&gt;My Installation of SemanticUI&lt;/h3&gt;
&lt;p&gt;You can download the source CSS and JS for SemanticUI directly, but if you want the extra features
such as theming, you need to get it from npm. It is recommended to also install Gulp globally.
Gulp automates part of the build process. In SemanticUI, the compiled CSS and JS is created
after factoring modifications such as overrides or changes to the source file. Gulp watches this 
and automatically compiles the final SemanticUI CSS/JS.&lt;/p&gt;

&lt;h3 id=&quot;mistakes---semanticui&quot;&gt;Mistakes - SemanticUI&lt;/h3&gt;
&lt;p&gt;Grid was difficult for me to grasp the first time since I kept comparing it to Bootstrap. 
I had problems getting content to align correctly when using nested grids.
Next time, I have to remember to nest grids inside columns and avoid using containers.&lt;/p&gt;

&lt;p&gt;Customizing elements was also a pain if you don’t understanding theming. &lt;strong&gt;I still don’t really.&lt;/strong&gt;*
In Bootstrap, you have &lt;em&gt;components&lt;/em&gt; and &lt;em&gt;utilities&lt;/em&gt; and the latter almost universally works on the former.
In SemanticUI, simple things such as color are tied only to certain components.
You have to use overrides and refer to the source files to see which variables to modify.&lt;/p&gt;

&lt;h3 id=&quot;mistakes---css&quot;&gt;Mistakes - CSS&lt;/h3&gt;
&lt;p&gt;When making dynamic content, a simple strategy is to display everything, then have JS hide it on initialization.
If you just use CSS’s hidden attribute, the content is not visible, but still occupies space since position attribute is default static.
Therefore, you also have to change the position attribute to absolute to remove it from flow.&lt;/p&gt;

&lt;p&gt;In SemanticUI, you can wrap it in a message element, then make its class hidden, removing the neccesity of changing attribute.&lt;/p&gt;

&lt;h3 id=&quot;mistakes---js&quot;&gt;Mistakes - JS&lt;/h3&gt;
&lt;p&gt;For a while, I always thought function(e) {…} and (e) =&amp;gt; {…} was equivalent.
They aren’t. It’s my mistake for not reading the documentation and would have saved myself time.
In the former, &lt;strong&gt;this&lt;/strong&gt; when called as a method in an object is the context that the function is called.
So if function is setInterval({this…},100), &lt;strong&gt;this&lt;/strong&gt; is the global object.
If you want this to refer to the object containing the function, you must pass this through binding or call.
For the latter ES6 anonymous function, &lt;strong&gt;this&lt;/strong&gt; is always the enclosing context.&lt;/p&gt;

&lt;p&gt;When using loops (for/while) versus forEach(), map(), filter(), since arguments are passed to a function,
the former allows early termination of the calling function by invoking return.
In the latter, invoking return is equivalent to invoking break in the former.&lt;/p&gt;</content><category term="thought" /><summary type="html">We all make mistakes. It's important to reflect to cement your understanding.</summary></entry><entry><title type="html">First Post</title><link href="http://127.0.0.1:4000/first-post/" rel="alternate" type="text/html" title="First Post" /><published>2018-10-29T00:00:00-04:00</published><updated>2018-10-29T00:00:00-04:00</updated><id>http://127.0.0.1:4000/first-post</id><content type="html" xml:base="http://127.0.0.1:4000/first-post/">&lt;p&gt;Greetings to readers.&lt;/p&gt;

&lt;p&gt;If you wanted an explosive introduction, this is more of a preface of what future content there will be. All that I’m willing to disclose about myself at the time is in my public accounts - LinkedIn, Github and the short blurb in the About section.&lt;/p&gt;

&lt;p&gt;I plan to blog about personal thoughts, AI, NLP, computer network, DB, algorithm, front end, back end and books. If those subjects seem overly broad, they will be at an introductory level, corresponding to my depth of my understanding of the subject matter. With time, as my understanding improves, I may add more tags.&lt;/p&gt;

&lt;p&gt;I hope to seriously get into reading. Currently on my reading list are the sci fi classics: &lt;strong&gt;1984, Do Androids Dream of Electric Sheep, Brave New World, The Hyperion Cantos, Hitchiker’s Guide to the Galaxy&lt;/strong&gt;, short stories by Isaac Asimov: &lt;strong&gt;I, Robot, Of Time and Space and Other Things&lt;/strong&gt; and amalgams of philosophy-CS-AI-math: &lt;strong&gt;I am a Strange Loop, Superintelligence&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At the moment, comments are not enabled. I don’t know what direction this blog will take and the quantity of readership. If I decide that I post with enough regularity and depth in subject, I will open it to discussion.&lt;/p&gt;

&lt;p&gt;Lastly, I anticipate that that the reading experience will quickly become bogged by this site’s poor blog design. While it is built on Jekyll, it is single column and doesn’t support search. Readers do not readily see the most recent posting so that will have to be added.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Blog topics&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AI&lt;/li&gt;
  &lt;li&gt;NLP&lt;/li&gt;
  &lt;li&gt;Computer network&lt;/li&gt;
  &lt;li&gt;DB&lt;/li&gt;
  &lt;li&gt;Algorithm&lt;/li&gt;
  &lt;li&gt;Front end&lt;/li&gt;
  &lt;li&gt;Back end&lt;/li&gt;
  &lt;li&gt;Books&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Book topics&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Scifi classics&lt;/li&gt;
  &lt;li&gt;Short story&lt;/li&gt;
  &lt;li&gt;Philosophy, CS, AI, Math&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Features that may be added&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Comment&lt;/li&gt;
  &lt;li&gt;More specific tags&lt;/li&gt;
  &lt;li&gt;Search&lt;/li&gt;
  &lt;li&gt;Recent Post&lt;/li&gt;
&lt;/ul&gt;</content><category term="thought" /><summary type="html">An obligatory introduction to readers and setting stage for content to come</summary></entry></feed>
