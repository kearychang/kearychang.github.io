<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://kearychang.github.io//feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://kearychang.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://kearychang.github.io//" rel="alternate" type="text/html" /><updated>2018-11-08T16:44:50-05:00</updated><id>https://kearychang.github.io//</id><title type="html">Keary Chang</title><subtitle></subtitle><entry><title type="html">Some Notes on Languages (CS)</title><link href="https://kearychang.github.io//language-theory/" rel="alternate" type="text/html" title="Some Notes on Languages (CS)" /><published>2018-11-05T00:00:00-05:00</published><updated>2018-11-05T00:00:00-05:00</updated><id>https://kearychang.github.io//language-theory</id><content type="html" xml:base="https://kearychang.github.io//language-theory/">&lt;h3 id=&quot;finite-automata&quot;&gt;Finite Automata&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Alphabet&lt;/strong&gt; is a set of &lt;strong&gt;characters&lt;/strong&gt;. &lt;strong&gt;Strings&lt;/strong&gt; are made from sequences of &lt;strong&gt;characters&lt;/strong&gt;.
&lt;strong&gt;Language&lt;/strong&gt; is a set of &lt;strong&gt;strings&lt;/strong&gt;. The &lt;strong&gt;closure&lt;/strong&gt; is all possible &lt;strong&gt;strings&lt;/strong&gt;. A &lt;strong&gt;language&lt;/strong&gt; is a subset of the &lt;strong&gt;closure&lt;/strong&gt;. To determine if a &lt;strong&gt;string&lt;/strong&gt; is valid in your &lt;strong&gt;language&lt;/strong&gt;, we test it in a mathematical machine, called the &lt;strong&gt;finite automaton&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rules&lt;/strong&gt;
There are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;starting states&lt;/li&gt;
  &lt;li&gt;accepting states&lt;/li&gt;
  &lt;li&gt;non-accepting states&lt;/li&gt;
  &lt;li&gt;state transitions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You start from the starting state and “consume” one character from your string, reading left to right. When the string has been consumed and you end on an accepting string, the string is a member of your language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DFA&lt;/strong&gt; or deterministic finite automatons are the simplest kind.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1 starting state&lt;/li&gt;
  &lt;li&gt;1 possible transition per character&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A language is &lt;strong&gt;regular&lt;/strong&gt; if it can be expressed as an &lt;strong&gt;DFA&lt;/strong&gt;.
A cool feature is that the complement of the &lt;strong&gt;language&lt;/strong&gt; can also be expressed as an &lt;strong&gt;DFA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NFA&lt;/strong&gt; or non-deterministic finite automatons have the property that&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;more than 1 possible transition per character&lt;/li&gt;
  &lt;li&gt;epsilon-transitions (no character consumed)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To evaluate if a string is accepted, among the possible state transitions,
at least one must end on an accepting state. Some questions are&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;can any problem solvable by &lt;strong&gt;NFA&lt;/strong&gt; be solved by &lt;strong&gt;DFA&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;can any problem solved by &lt;strong&gt;NFA&lt;/strong&gt; be solved efficiently by &lt;strong&gt;DFA&lt;/strong&gt;?
All &lt;strong&gt;NFA&lt;/strong&gt; can be expressed as &lt;strong&gt;DFA&lt;/strong&gt;. Efficiency varies between automatons.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A way of stating this is - is there a universe where this sequence of actions leads to the desired outcome?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NFA -&amp;gt; DFA&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Subset Construction
Each state in &lt;strong&gt;DFA&lt;/strong&gt; corresponds to set of states in &lt;strong&gt;NFA&lt;/strong&gt;.
Start state in &lt;strong&gt;NFA&lt;/strong&gt; is start state in &lt;strong&gt;DFA&lt;/strong&gt; plus all epsilon transitions.
The transition from some initial state from some character is set of all reachable states, including epsilon transitions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Regular Languages&lt;/strong&gt;
L1 L2 are languages. Then &lt;strong&gt;regular languages&lt;/strong&gt; have the property that&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Complement L1 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;Invert all accepting and non-accepting states and direction of transitions&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;L1 union L2 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;Starting with a new starting state and add epsilon transitions to all starting states in L1 and L2&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;L1 intersection L2 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;This is equivalent to the complement of the union of the complements of L1 and L2&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Concatenation L1 L2 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;Add epsilon transition from all L1 accepting states to all L2 starting states&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Closure L1 is also regular
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;Language exponentiation&lt;/strong&gt; is just concatenation of language with itself
Just add an epsilon transition from all accepting states to starting states&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;e.g. Noun = {} Verb = {} Article = {}, ArticleNounVerbNoun is a sentence made from concatenation of other languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular Expressions&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Atomic Regular Expression
    &lt;blockquote&gt;
      &lt;p&gt;null, { a }, { epsilon }&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Compound Regular Expression
    &lt;blockquote&gt;
      &lt;p&gt;.
R*
R+
R?
AB
A|B
A{4}&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Thompson’s Algorithm&lt;/strong&gt;
Regex matchers convert regular expressions into NFA, then DFAs.&lt;/p&gt;

&lt;p&gt;The theorem is that if a language is regular, there is a regular expression for it.
Imagine a transition that is a regular expression, rather than a character.
If we can convert NFA to regular expression, we can read that off it.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Add epsilon transitions to start and accepting states&lt;/li&gt;
  &lt;li&gt;Eliminate intermediate states between start and accepting states using properties of regular languages&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Transformation&lt;/strong&gt;
DFA - (direct conversion) -&amp;gt; NFA - (state elimination) -&amp;gt; Regex
Regex - (Thompson’s Algorithm) -&amp;gt; NFA - (subset construction) -&amp;gt; DFA&lt;/p&gt;

&lt;h3 id=&quot;nonregular-language&quot;&gt;Nonregular Language&lt;/h3&gt;

&lt;h3 id=&quot;context-free-grammar&quot;&gt;Context Free Grammar&lt;/h3&gt;
&lt;p&gt;So regex matches strings and automata accepts strings in the language. CFGs is a different way to define class of languages.
It has these 4 objects.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;nonterminal symbols&lt;/li&gt;
  &lt;li&gt;terminal symbols&lt;/li&gt;
  &lt;li&gt;production rules - how to convert nonterminal to string of terminal and nonterminal&lt;/li&gt;
  &lt;li&gt;start symbol (LHS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E -&amp;gt; int
E -&amp;gt; E Op E
E -&amp;gt; ( E )
Op -&amp;gt; + - * /&lt;/p&gt;

&lt;p&gt;CFG is the set of strings derivable from the starting symbol.
Derivation involve replacing nonterminals with the RHS of the rules of production.
It is a &lt;strong&gt;context free language&lt;/strong&gt; iff there is a CFG for it.
Every &lt;strong&gt;regular language&lt;/strong&gt; is &lt;strong&gt;context free&lt;/strong&gt; since the latter is a superset of the former.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parse Trees&lt;/strong&gt;
This is a tree encoding steps of derivation. Each internal node is nonterminal and each leaf node is terminal.
&lt;strong&gt;Parsing&lt;/strong&gt; involves finding a &lt;strong&gt;parse tree&lt;/strong&gt; for that string, often done in compilation.
A problem that can arise is &lt;strong&gt;ambiguity&lt;/strong&gt; when there is a string with at least 2 &lt;strong&gt;parse trees&lt;/strong&gt;.
One way to resolve this is to use operator precedence.&lt;/p&gt;</content><category term="thought" /><summary type="html">A Quick Review of Automata, Regular Language, Regex and CFG</summary></entry><entry><title type="html">Github Pages with Jekyll Notes</title><link href="https://kearychang.github.io//github-pages/" rel="alternate" type="text/html" title="Github Pages with Jekyll Notes" /><published>2018-11-05T00:00:00-05:00</published><updated>2018-11-05T00:00:00-05:00</updated><id>https://kearychang.github.io//github-pages</id><content type="html" xml:base="https://kearychang.github.io//github-pages/">&lt;h1 id=&quot;lets-create-a-personal-website-on-github&quot;&gt;Let’s Create a Personal Website on Github&lt;/h1&gt;
&lt;p&gt;Most professionals have a personal website. It showcases your CV, portfolio, hobbies and personality. It’s a more intimate presentation of yourself to prospective employers, rather than submitting flavourless cover letter and resumes.&lt;/p&gt;

&lt;p&gt;There are numerous web hosts. A popular one is Github for personal websites. The default domain name is $githubaccount/github.io so it is easy to remember. This is just a web server so don’t try to use it to host a web app that connects to DB or as an application server.&lt;/p&gt;

&lt;p&gt;Github Pages comes with support for Jekyll. This is a framework which makes it simple to reuse common HTML elements such as header and navbars across different pages of your website.
It comes with simple themes and you can use Markdown instead of HTML.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Have MinGW installed along with MSYS and the base packages&lt;/li&gt;
    &lt;li&gt;Make sure &lt;strong&gt;C:\MinGW&lt;/strong&gt; and &lt;strong&gt;C:\MinGW\1.0&lt;/strong&gt; are added to PATH environment variable.&lt;/li&gt;
    &lt;li&gt;Install Ruby v2.4.0 or higher (the developer edition)&lt;/li&gt;
    &lt;li&gt;Run the command &lt;strong&gt;»gem install jekyll bundler&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Create a repo &lt;strong&gt;$domain_name.github.io&lt;/strong&gt; in Github&lt;/li&gt;
    &lt;li&gt;That URL should work now&lt;/li&gt;
    &lt;li&gt;There is a &lt;strong&gt;_config.yml&lt;/strong&gt; file which has line theme: $var&lt;/li&gt;
    &lt;li&gt;Look for the Jekyll theme you like and set that to $var&lt;/li&gt;
    &lt;li&gt;Gem file is Ruby’s equivalent to package.json in npm. It indicates project dependencies.&lt;/li&gt;
    &lt;li&gt;If it isn’t there, create one. Make sure you use char ending UTF-8. Copy this into the file.
source ‘https://rubygems.org’
gem ‘github-pages’, group: :jekyll_plugins
Then add gem “$JEKYLL THEME$ to the last line.&lt;/li&gt;
    &lt;li&gt;Run command &lt;strong&gt;»bundle install&lt;/strong&gt; to install it locally&lt;/li&gt;
    &lt;li&gt;Run command &lt;strong&gt;»bundle exec jekyll serve&lt;/strong&gt; to host locally&lt;/li&gt;
    &lt;li&gt;It will be on &lt;strong&gt;http://localhost:4000&lt;/strong&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are some themes I found.
https://github.com/pages-themes/minimal
https://github.com/Gaohaoyang/gaohaoyang.github.io
https://github.com/TaylanTatli/Moon/&lt;/p&gt;

&lt;h2 id=&quot;making-the-website&quot;&gt;Making the Website&lt;/h2&gt;
&lt;p&gt;First, you need to know that Github Pages allows certain parameters and locks others in the &lt;strong&gt;_config.yml&lt;/strong&gt; from being modified. It is specified here - https://help.github.com/articles/configuring-jekyll/&lt;/p&gt;

&lt;h3 id=&quot;liquid&quot;&gt;Liquid&lt;/h3&gt;
&lt;p&gt;Objects - where to output content&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Github Pages with Jekyll Notes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tags - Logic and Control Flow&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;{٪ if page.show_sidebar ٪}
…
{٪ endif ٪}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Filters - Modifies output of &lt;strong&gt;object&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;front-matter&quot;&gt;Front Matter&lt;/h3&gt;
&lt;p&gt;This is YAML snippet enclosed between triple dashes at top of file.
It is used to set variables for page.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;---
var: 5 
---&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Front matter variables can be referenced by &lt;strong&gt;page.var&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;layout&quot;&gt;Layout&lt;/h3&gt;
&lt;p&gt;These are templates that wrap around your content. You call them to avoid repeating yourself.
They are in directory &lt;strong&gt;_layouts&lt;/strong&gt;. To determine where it wraps the body, 
wrap **&amp;lt;!DOCTYPE html&amp;gt;
&lt;!--[if lt IE 7]&gt;&lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if (IE 7)&amp;!(IEMobile)]&gt;&lt;html class=&quot;no-js lt-ie9 lt-ie8&quot;&gt;&lt;![endif]--&gt;
&lt;!--[if (IE 8)&amp;!(IEMobile)]&gt;&lt;html class=&quot;no-js lt-ie9&quot;&gt;&lt;![endif]--&gt;
&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &amp;lt;html class=&quot;no-js&quot;&amp;gt;&lt;!--&lt;![endif]--&gt;&lt;/p&gt;
&lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;meta content=&quot;text/html; charset=UTF-8&quot; http-equiv=&quot;Content-Type&quot; /&gt;
    &amp;lt;meta http-equiv=X-UA-Compatible content=&quot;IE=edge,chrome=1&quot;&amp;gt;
    &lt;title&gt;Reflections on Lessons working with in SemanticUI, JS &amp;#8211; Keary Chang&lt;/title&gt;
    &lt;meta name=&quot;description&quot; content=&quot;&quot; /&gt;
    &lt;meta name=&quot;keywords&quot; content=&quot;thought&quot; /&gt;
    &lt;!-- Twitter Cards --&gt;
    &lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot; /&gt;
    &lt;meta name=&quot;twitter:image&quot; content=&quot;https://kearychang.github.io//assets/img/logo.JPG&quot; /&gt;
    &lt;meta name=&quot;twitter:title&quot; content=&quot;Reflections on Lessons working with in SemanticUI, JS&quot; /&gt;
    &lt;meta name=&quot;twitter:description&quot; content=&quot;We all make mistakes. It’s important to reflect to cement your understanding.&quot; /&gt;
    
    &lt;!-- Open Graph --&gt;
    &lt;meta property=&quot;og:locale&quot; content=&quot;en_US&quot; /&gt;
    &lt;meta property=&quot;og:type&quot; content=&quot;article&quot; /&gt;
    &lt;meta property=&quot;og:title&quot; content=&quot;Reflections on Lessons working with in SemanticUI, JS&quot; /&gt;
    &lt;meta property=&quot;og:description&quot; content=&quot;We all make mistakes. It’s important to reflect to cement your understanding.&quot; /&gt;
    &lt;meta property=&quot;og:url&quot; content=&quot;https://kearychang.github.io//reflections/&quot; /&gt;
    &lt;meta property=&quot;og:site_name&quot; content=&quot;Keary Chang&quot; /&gt;
    &lt;meta property=&quot;og:image&quot; content=&quot;https://kearychang.github.io//assets/img/logo.JPG&quot; /&gt;
    
    
    
    &lt;link rel=&quot;canonical&quot; href=&quot;https://kearychang.github.io//reflections/&quot; /&gt;
    &lt;link href=&quot;https://kearychang.github.io//feed.xml&quot; type=&quot;application/atom+xml&quot; rel=&quot;alternate&quot; title=&quot;Keary Chang Feed&quot; /&gt;
    &lt;!-- Handheld --&gt;
    &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;True&quot; /&gt;
    &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;!-- CSS --&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://kearychang.github.io//assets/css/main.css&quot; /&gt;
    &lt;!-- JS --&gt;
    &lt;script src=&quot;https://kearychang.github.io//assets/js/modernizr-3.3.1.custom.min.js&quot;&gt;&lt;/script&gt;
    &lt;!-- Favicons --&gt;
    &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;https://kearychang.github.io//assets/img/favicons/apple-icon-precomposed.png&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;72x72&quot; href=&quot;https://kearychang.github.io//assets/img/favicons/apple-icon-72x72.png&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;114x114&quot; href=&quot;https://kearychang.github.io//assets/img/favicons/apple-icon-114x114.png&quot; /&gt;
    &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;144x144&quot; href=&quot;https://kearychang.github.io//assets/img/favicons/apple-icon-144x144.png&quot; /&gt;
    &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/png&quot; href=&quot;https://kearychang.github.io//favicon.png&quot; /&gt;
    &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://kearychang.github.io//favicon.ico&quot; /&gt;
    &lt;!-- Background Image --&gt;
    
    
    
    &lt;style type=&quot;text/css&quot;&gt;body {background-image:url(https://kearychang.github.io//assets/img/placeholder-big.jpg);  background-repeat: no-repeat; background-size: cover; }&lt;/style&gt;
    
    &lt;!-- Post Feature Image --&gt;
    

&lt;/head&gt;
&lt;body&gt;
    	&lt;nav id=&quot;dl-menu&quot; class=&quot;dl-menuwrapper&quot; role=&quot;navigation&quot;&gt;
		&lt;button class=&quot;dl-trigger&quot;&gt;Open Menu&lt;/button&gt;
		&lt;ul class=&quot;dl-menu&quot;&gt;
			&lt;li&gt;&lt;a href=&quot;https://kearychang.github.io//&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;
				&lt;a href=&quot;#&quot;&gt;About&lt;/a&gt;
				&lt;ul class=&quot;dl-submenu&quot;&gt;
					&lt;li&gt;
						&lt;img src=&quot;https://kearychang.github.io//assets/img/logo.JPG&quot; alt=&quot;Keary Chang photo&quot; class=&quot;author-photo&quot; /&gt;
						&lt;h4&gt;Keary Chang&lt;/h4&gt;
						&lt;p&gt;&lt;/p&gt;
					&lt;/li&gt;
					&lt;li&gt;&lt;a href=&quot;https://kearychang.github.io//about/&quot;&gt;&lt;span class=&quot;btn btn-inverse&quot;&gt;Learn More&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
					&lt;li&gt;
                        &lt;a href=&quot;mailto:keary.chang@ryerson.ca&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;i class=&quot;fa fa-fw fa-envelope-square&quot;&gt;&lt;/i&gt; Email&lt;/a&gt;
                    &lt;/li&gt;
                    
                    
                    
                    &lt;li&gt;
                        &lt;a href=&quot;http://linkedin.com/in/kearychang&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;i class=&quot;fa fa-fw fa-linkedin-square&quot;&gt;&lt;/i&gt; LinkedIn&lt;/a&gt;
                    &lt;/li&gt;
                    
                    
                    
                    &lt;li&gt;
                        &lt;a href=&quot;http://github.com/kearychang&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;i class=&quot;fa fa-fw fa-github&quot;&gt;&lt;/i&gt; Github&lt;/a&gt;
                    &lt;/li&gt;
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    &lt;li&gt;
                        &lt;a href=&quot;http://codepen.io/k27chang&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;i class=&quot;fa fa-fw fa-codepen&quot;&gt;&lt;/i&gt; Codepen&lt;/a&gt;
                    &lt;/li&gt;
                    
                    
                    
                    &lt;li&gt;
                        &lt;a href=&quot;https://glitch.com/@yearofthesheep2&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;i class=&quot;fa fa-fw fa-code&quot;&gt;&lt;/i&gt; Glitch&lt;/a&gt;
                    &lt;/li&gt;
				&lt;/ul&gt;&lt;!-- /.dl-submenu --&gt;
			&lt;/li&gt;
			&lt;li&gt;
				&lt;a href=&quot;#&quot;&gt;Blog&lt;/a&gt;
				&lt;ul class=&quot;dl-submenu&quot;&gt;
					&lt;li&gt;&lt;a href=&quot;https://kearychang.github.io//post/&quot;&gt;All Posts&lt;/a&gt;&lt;/li&gt;
					&lt;li&gt;&lt;a href=&quot;https://kearychang.github.io//tags/&quot;&gt;All Tags&lt;/a&gt;&lt;/li&gt;
				&lt;/ul&gt;
			&lt;/li&gt;
			
		    
		    &lt;li&gt;&lt;a href=&quot;https://kearychang.github.io//projects/&quot;&gt;Projects&lt;/a&gt;&lt;/li&gt;
		  
		&lt;/ul&gt;&lt;!-- /.dl-menu --&gt;
	&lt;/nav&gt;&lt;!-- /.dl-menuwrapper --&gt;

    &lt;!-- Header --&gt;
    &lt;header class=&quot;header&quot; role=&quot;banner&quot;&gt;
        &lt;div class=&quot;wrapper animated fadeIn&quot;&gt;
            &lt;div class=&quot;content&quot;&gt;
                &lt;div class=&quot;post-title &quot;&gt;
                    &lt;h1&gt;Reflections on Lessons working with in SemanticUI, JS&lt;/h1&gt;
                    &lt;h4&gt;02 Nov 2018&lt;/h4&gt;
                    
                    &lt;p class=&quot;reading-time&quot;&gt;
                      &lt;i class=&quot;fa fa-clock-o&quot;&gt;&lt;/i&gt;
                      

Reading time ~3 minutes

                    &lt;/p&gt;&lt;!-- /.entry-reading-time --&gt;
                    
                    
                    &lt;a class=&quot;btn zoombtn&quot; href=&quot;https://kearychang.github.io//posts/&quot;&gt;
                    
                        &lt;i class=&quot;fa fa-chevron-left&quot;&gt;&lt;/i&gt;
                    &lt;/a&gt;
                &lt;/div&gt;
                &lt;p&gt;I really &lt;strong&gt;really&lt;/strong&gt; like the appearance of SemanticUI. Bootstrap is overused. You can always customize,
but they don’t make it as easy to. Let’s give a quick rundown of SemanticUI. 
Comparatively, SemanticUI classifies its &lt;strong&gt;components&lt;/strong&gt; as&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;global - CSS attributes shared across all of SemanticUI, e.g. color, font size, spacing&lt;/li&gt;
  &lt;li&gt;elements - individual UI elements, e.g. message, button, input&lt;/li&gt;
  &lt;li&gt;collections - groups of elements, e.g. form, grid, menu, table&lt;/li&gt;
  &lt;li&gt;views&lt;/li&gt;
  &lt;li&gt;modules - describes how elements look and act, e.g. dropdowns, modals&lt;/li&gt;
  &lt;li&gt;behaviors - descriptions about how page elements should act, e.g. form validation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I did&lt;/h3&gt;

&lt;p&gt;I decided to try out SemanticUI on a small website project that implements Bernstein’s algorithm
for normalization of a DB schema. This is a sequence of how I built it so far&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Wireframe and create container&lt;/li&gt;
  &lt;li&gt;Create a SemanticUI grid and put component inside columns&lt;/li&gt;
  &lt;li&gt;There are 4 sections: header, description, steps and configuration&lt;/li&gt;
  &lt;li&gt;Header consists of title with segment separating it from description&lt;/li&gt;
  &lt;li&gt;Description consists of nested grid with 2x2 resizable explanation of the algorithm&lt;/li&gt;
  &lt;li&gt;Steps is a row of 3 buttons where you toggle between steps, changing the view of description and configuration&lt;/li&gt;
  &lt;li&gt;Configuration is a series of forms (input, textarea) that users enter and view information about their schema&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;my-installation-of-semanticui&quot;&gt;My Installation of SemanticUI&lt;/h3&gt;
&lt;p&gt;You can download the source CSS and JS for SemanticUI directly, but if you want the extra features
such as theming, you need to get it from npm. It is recommended to also install Gulp globally.
Gulp automates part of the build process. In SemanticUI, the compiled CSS and JS is created
after factoring modifications such as overrides or changes to the source file. Gulp watches this 
and automatically compiles the final SemanticUI CSS/JS.&lt;/p&gt;

&lt;h3 id=&quot;mistakes---semanticui&quot;&gt;Mistakes - SemanticUI&lt;/h3&gt;
&lt;p&gt;Grid was difficult for me to grasp the first time since I kept comparing it to Bootstrap. 
I had problems getting content to align correctly when using nested grids.
Next time, I have to remember to nest grids inside columns and avoid using containers.&lt;/p&gt;

&lt;p&gt;Customizing elements was also a pain if you don’t understanding theming. &lt;strong&gt;I still don’t really.&lt;/strong&gt;*
In Bootstrap, you have &lt;em&gt;components&lt;/em&gt; and &lt;em&gt;utilities&lt;/em&gt; and the latter almost universally works on the former.
In SemanticUI, simple things such as color are tied only to certain components.
You have to use overrides and refer to the source files to see which variables to modify.&lt;/p&gt;

&lt;h3 id=&quot;mistakes---css&quot;&gt;Mistakes - CSS&lt;/h3&gt;
&lt;p&gt;When making dynamic content, a simple strategy is to display everything, then have JS hide it on initialization.
If you just use CSS’s hidden attribute, the content is not visible, but still occupies space since position attribute is default static.
Therefore, you also have to change the position attribute to absolute to remove it from flow.&lt;/p&gt;

&lt;p&gt;In SemanticUI, you can wrap it in a message element, then make its class hidden, removing the neccesity of changing attribute.&lt;/p&gt;

&lt;h3 id=&quot;mistakes---js&quot;&gt;Mistakes - JS&lt;/h3&gt;
&lt;p&gt;For a while, I always thought function(e) {…} and (e) =&amp;gt; {…} was equivalent.
They aren’t. It’s my mistake for not reading the documentation and would have saved myself time.
In the former, &lt;strong&gt;this&lt;/strong&gt; when called as a method in an object is the context that the function is called.
So if function is setInterval({this…},100), &lt;strong&gt;this&lt;/strong&gt; is the global object.
If you want this to refer to the object containing the function, you must pass this through binding or call.
For the latter ES6 anonymous function, &lt;strong&gt;this&lt;/strong&gt; is always the enclosing context.&lt;/p&gt;

&lt;p&gt;When using loops (for/while) versus forEach(), map(), filter(), since arguments are passed to a function,
the former allows early termination of the calling function by invoking return.
In the latter, invoking return is equivalent to invoking break in the former.&lt;/p&gt;

                &lt;div class=&quot;entry-meta&quot;&gt;
                &lt;br /&gt;
&lt;hr /&gt;
&lt;span class=&quot;entry-tags&quot;&gt;&lt;a href=&quot;https://kearychang.github.io//tags/#thought&quot; title=&quot;Pages tagged thought&quot; class=&quot;tag&quot;&gt;&lt;span class=&quot;term&quot;&gt;thought&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;social-share&quot;&gt;
    &lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=https://kearychang.github.io//reflections/&quot; title=&quot;Share on Facebook&quot; class=&quot;tag&quot;&gt;
        &lt;span class=&quot;term&quot;&gt;&lt;i class=&quot;fa fa-facebook-square&quot;&gt;&lt;/i&gt; Share&lt;/span&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://twitter.com/intent/tweet?text=https://kearychang.github.io//reflections/&quot; title=&quot;Share on Twitter&quot; class=&quot;tag&quot;&gt;
        &lt;span class=&quot;term&quot;&gt;&lt;i class=&quot;fa fa-twitter-square&quot;&gt;&lt;/i&gt; Tweet&lt;/span&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://plus.google.com/share?url=https://kearychang.github.io//reflections/&quot; title=&quot;Share on Google+&quot; class=&quot;tag&quot;&gt;
            &lt;span class=&quot;term&quot;&gt;&lt;i class=&quot;fa fa-google-plus-square&quot;&gt;&lt;/i&gt; +1&lt;/span&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;

                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
    &lt;/header&gt;
        &lt;!-- JS --&gt;
    &lt;script src=&quot;https://kearychang.github.io//assets/js/jquery-1.12.0.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://kearychang.github.io//assets/js/jquery.dlmenu.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://kearychang.github.io//assets/js/jquery.goup.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://kearychang.github.io//assets/js/jquery.magnific-popup.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://kearychang.github.io//assets/js/jquery.fitvid.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://kearychang.github.io//assets/js/scripts.js&quot;&gt;&lt;/script&gt;
    
    
        

    

    
    &lt;!-- MathJax --&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;
    
&lt;/body&gt;
&lt;p&gt;&amp;lt;/html&amp;gt;
**. Then assign value of layout in front matter to file name of layout.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;---
layout: default
title: Home
---
HELLO WORLD&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use markdown, create a file with extension &lt;em&gt;.md&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;We don’t want to repeat ourselves. Code we refer is inside the &lt;strong&gt;_includes&lt;/strong&gt; directory.
Html or Markdown can be used from &lt;strong&gt;includes&lt;/strong&gt; by &lt;em&gt;{٪include navigation.html}&lt;/em&gt;
One of Jekyll’s useful &lt;em&gt;variables&lt;/em&gt; is page.url where you can check if each link is the current page.&lt;/p&gt;

&lt;h3 id=&quot;data-file&quot;&gt;Data File&lt;/h3&gt;
&lt;p&gt;Jekyll supports loading CVS, JSON, YAML files inside the &lt;strong&gt;_data&lt;/strong&gt; directory.
YAML is used to store array of navigation items.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;- name: Home
(white space  x2)link: /
- name: About
(white space  x2)link: /about.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can refer to &lt;strong&gt;data files&lt;/strong&gt; by site.data.navigation&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;nav&amp;gt;
{٪ for item in site.data.navigation ٪}
  a href=”” {٪ if page.url == item.link ٪} 
  style=”color: red;”{٪ endif ٪}&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;a&amp;gt;
{٪ endfor ٪}&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;nav&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;assets&quot;&gt;Assets&lt;/h3&gt;
&lt;p&gt;CSS, JS, images and other asset are often placed in the &lt;strong&gt;asset&lt;/strong&gt; directory. 
Inline styling is not best practice so we use CSS. 
Let’s create a SASS file at &lt;em&gt;/assets/css/styles.scss&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;---
---
@import “@main”;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This tells it to look for &lt;strong&gt;_sass\main.scss&lt;/strong&gt;.
https://sass-lang.com/documentation/file.SASS_REFERENCE.html
Within your layout, create a tag element that loads your SASS file.
link rel=”stylesheet” href=”/assets/css/styles.css”&lt;/p&gt;

&lt;h3 id=&quot;blogging&quot;&gt;Blogging&lt;/h3&gt;
&lt;p&gt;Jekyll stores blog posts in folder &lt;strong&gt;_posts&lt;/strong&gt;. These are .md and accessed by &lt;strong&gt;site.posts&lt;/strong&gt;.
There is layout and author values.  The post layout outputs title, date, author and content body.
This is then wrapped by the default layout. Create &lt;strong&gt;blog.html&lt;/strong&gt; in your root folder.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;_posts/2018-08-21-apples.md
---
layout: post
author: jill
---&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember to add this to main navigation in &lt;em&gt;/_data/navigation.yml&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;name: Blog
 link: /blog.html&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><category term="thought" /><summary type="html">Setting up Github Pages and quick rundown of Jekyll</summary></entry><entry><title type="html">Reflections on Lessons working with in SemanticUI, JS</title><link href="https://kearychang.github.io//reflections/" rel="alternate" type="text/html" title="Reflections on Lessons working with in SemanticUI, JS" /><published>2018-11-02T00:00:00-04:00</published><updated>2018-11-02T00:00:00-04:00</updated><id>https://kearychang.github.io//reflections</id><content type="html" xml:base="https://kearychang.github.io//reflections/">&lt;p&gt;I really &lt;strong&gt;really&lt;/strong&gt; like the appearance of SemanticUI. Bootstrap is overused. You can always customize,
but they don’t make it as easy to. Let’s give a quick rundown of SemanticUI. 
Comparatively, SemanticUI classifies its &lt;strong&gt;components&lt;/strong&gt; as&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;global - CSS attributes shared across all of SemanticUI, e.g. color, font size, spacing&lt;/li&gt;
  &lt;li&gt;elements - individual UI elements, e.g. message, button, input&lt;/li&gt;
  &lt;li&gt;collections - groups of elements, e.g. form, grid, menu, table&lt;/li&gt;
  &lt;li&gt;views&lt;/li&gt;
  &lt;li&gt;modules - describes how elements look and act, e.g. dropdowns, modals&lt;/li&gt;
  &lt;li&gt;behaviors - descriptions about how page elements should act, e.g. form validation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-i-did&quot;&gt;What I did&lt;/h3&gt;

&lt;p&gt;I decided to try out SemanticUI on a small website project that implements Bernstein’s algorithm
for normalization of a DB schema. This is a sequence of how I built it so far&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Wireframe and create container&lt;/li&gt;
  &lt;li&gt;Create a SemanticUI grid and put component inside columns&lt;/li&gt;
  &lt;li&gt;There are 4 sections: header, description, steps and configuration&lt;/li&gt;
  &lt;li&gt;Header consists of title with segment separating it from description&lt;/li&gt;
  &lt;li&gt;Description consists of nested grid with 2x2 resizable explanation of the algorithm&lt;/li&gt;
  &lt;li&gt;Steps is a row of 3 buttons where you toggle between steps, changing the view of description and configuration&lt;/li&gt;
  &lt;li&gt;Configuration is a series of forms (input, textarea) that users enter and view information about their schema&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;my-installation-of-semanticui&quot;&gt;My Installation of SemanticUI&lt;/h3&gt;
&lt;p&gt;You can download the source CSS and JS for SemanticUI directly, but if you want the extra features
such as theming, you need to get it from npm. It is recommended to also install Gulp globally.
Gulp automates part of the build process. In SemanticUI, the compiled CSS and JS is created
after factoring modifications such as overrides or changes to the source file. Gulp watches this 
and automatically compiles the final SemanticUI CSS/JS.&lt;/p&gt;

&lt;h3 id=&quot;mistakes---semanticui&quot;&gt;Mistakes - SemanticUI&lt;/h3&gt;
&lt;p&gt;Grid was difficult for me to grasp the first time since I kept comparing it to Bootstrap. 
I had problems getting content to align correctly when using nested grids.
Next time, I have to remember to nest grids inside columns and avoid using containers.&lt;/p&gt;

&lt;p&gt;Customizing elements was also a pain if you don’t understanding theming. &lt;strong&gt;I still don’t really.&lt;/strong&gt;*
In Bootstrap, you have &lt;em&gt;components&lt;/em&gt; and &lt;em&gt;utilities&lt;/em&gt; and the latter almost universally works on the former.
In SemanticUI, simple things such as color are tied only to certain components.
You have to use overrides and refer to the source files to see which variables to modify.&lt;/p&gt;

&lt;h3 id=&quot;mistakes---css&quot;&gt;Mistakes - CSS&lt;/h3&gt;
&lt;p&gt;When making dynamic content, a simple strategy is to display everything, then have JS hide it on initialization.
If you just use CSS’s hidden attribute, the content is not visible, but still occupies space since position attribute is default static.
Therefore, you also have to change the position attribute to absolute to remove it from flow.&lt;/p&gt;

&lt;p&gt;In SemanticUI, you can wrap it in a message element, then make its class hidden, removing the neccesity of changing attribute.&lt;/p&gt;

&lt;h3 id=&quot;mistakes---js&quot;&gt;Mistakes - JS&lt;/h3&gt;
&lt;p&gt;For a while, I always thought function(e) {…} and (e) =&amp;gt; {…} was equivalent.
They aren’t. It’s my mistake for not reading the documentation and would have saved myself time.
In the former, &lt;strong&gt;this&lt;/strong&gt; when called as a method in an object is the context that the function is called.
So if function is setInterval({this…},100), &lt;strong&gt;this&lt;/strong&gt; is the global object.
If you want this to refer to the object containing the function, you must pass this through binding or call.
For the latter ES6 anonymous function, &lt;strong&gt;this&lt;/strong&gt; is always the enclosing context.&lt;/p&gt;

&lt;p&gt;When using loops (for/while) versus forEach(), map(), filter(), since arguments are passed to a function,
the former allows early termination of the calling function by invoking return.
In the latter, invoking return is equivalent to invoking break in the former.&lt;/p&gt;</content><category term="thought" /><summary type="html">We all make mistakes. It's important to reflect to cement your understanding.</summary></entry><entry><title type="html">First Post</title><link href="https://kearychang.github.io//first-post/" rel="alternate" type="text/html" title="First Post" /><published>2018-10-29T00:00:00-04:00</published><updated>2018-10-29T00:00:00-04:00</updated><id>https://kearychang.github.io//first-post</id><content type="html" xml:base="https://kearychang.github.io//first-post/">&lt;p&gt;Greetings to readers.&lt;/p&gt;

&lt;p&gt;If you wanted an explosive introduction, this is more of a preface of what future content there will be. All that I’m willing to disclose about myself at the time is in my public accounts - LinkedIn, Github and the short blurb in the About section.&lt;/p&gt;

&lt;p&gt;I plan to blog about personal thoughts, AI, NLP, computer network, DB, algorithm, front end, back end and books. If those subjects seem overly broad, they will be at an introductory level, corresponding to my depth of my understanding of the subject matter. With time, as my understanding improves, I may add more tags.&lt;/p&gt;

&lt;p&gt;I hope to seriously get into reading. Currently on my reading list are the sci fi classics: &lt;strong&gt;1984, Do Androids Dream of Electric Sheep, Brave New World, The Hyperion Cantos, Hitchiker’s Guide to the Galaxy&lt;/strong&gt;, short stories by Isaac Asimov: &lt;strong&gt;I, Robot, Of Time and Space and Other Things&lt;/strong&gt; and amalgams of philosophy-CS-AI-math: &lt;strong&gt;I am a Strange Loop, Superintelligence&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At the moment, comments are not enabled. I don’t know what direction this blog will take and the quantity of readership. If I decide that I post with enough regularity and depth in subject, I will open it to discussion.&lt;/p&gt;

&lt;p&gt;Lastly, I anticipate that that the reading experience will quickly become bogged by this site’s poor blog design. While it is built on Jekyll, it is single column and doesn’t support search. Readers do not readily see the most recent posting so that will have to be added.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Blog topics&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AI&lt;/li&gt;
  &lt;li&gt;NLP&lt;/li&gt;
  &lt;li&gt;Computer network&lt;/li&gt;
  &lt;li&gt;DB&lt;/li&gt;
  &lt;li&gt;Algorithm&lt;/li&gt;
  &lt;li&gt;Front end&lt;/li&gt;
  &lt;li&gt;Back end&lt;/li&gt;
  &lt;li&gt;Books&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Book topics&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Scifi classics&lt;/li&gt;
  &lt;li&gt;Short story&lt;/li&gt;
  &lt;li&gt;Philosophy, CS, AI, Math&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Features that may be added&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Comment&lt;/li&gt;
  &lt;li&gt;More specific tags&lt;/li&gt;
  &lt;li&gt;Search&lt;/li&gt;
  &lt;li&gt;Recent Post&lt;/li&gt;
&lt;/ul&gt;</content><category term="thought" /><summary type="html">An obligatory introduction to readers and setting stage for content to come</summary></entry><entry><title type="html">Moon Jekyll Theme</title><link href="https://kearychang.github.io//!!!-moon-theme/" rel="alternate" type="text/html" title="Moon Jekyll Theme" /><published>2016-04-06T00:00:00-04:00</published><updated>2016-04-06T00:00:00-04:00</updated><id>https://kearychang.github.io//!!!-moon-theme</id><content type="html" xml:base="https://kearychang.github.io//!!!-moon-theme/">&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/754514/14509720/61c61058-01d6-11e6-93ab-0918515ecd56.png&quot; alt=&quot;Moon Homepage&quot; /&gt;&lt;/p&gt;

&lt;center&gt;&lt;b&gt;Moon&lt;/b&gt; is a minimal, one column jekyll theme.&lt;/center&gt;

&lt;p&gt;I’m not a developer or designer. And I don’t add footer to show who did this theme. If you like this theme or using it, please give a &lt;strong&gt;star&lt;/strong&gt; for motivation, It makes me happy.&lt;/p&gt;

&lt;iframe src=&quot;https://ghbtns.com/github-btn.html?user=TaylanTatli&amp;amp;repo=Moon&amp;amp;type=star&amp;amp;count=true&amp;amp;size=large&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;160px&quot; height=&quot;30px&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Fork the &lt;a href=&quot;https://github.com/TaylanTatli/Moon/fork&quot;&gt;Moon repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Remove sample posts from &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder and add yours.&lt;/li&gt;
  &lt;li&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt; file in &lt;code class=&quot;highlighter-rouge&quot;&gt;about&lt;/code&gt; folder.&lt;/li&gt;
  &lt;li&gt;Change repo name to &lt;code class=&quot;highlighter-rouge&quot;&gt;YourUserName.github.io&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all.&lt;/p&gt;

&lt;h2 id=&quot;preview&quot;&gt;Preview&lt;/h2&gt;

&lt;figure class=&quot;third&quot;&gt;
    
    &lt;a href=&quot;https://cloud.githubusercontent.com/assets/754514/14509716/61ac6c8e-01d6-11e6-879f-8308883de790.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/754514/14509716/61ac6c8e-01d6-11e6-879f-8308883de790.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;a href=&quot;https://cloud.githubusercontent.com/assets/754514/14509717/61ad05ae-01d6-11e6-85ae-5a817dd8763b.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/754514/14509717/61ad05ae-01d6-11e6-85ae-5a817dd8763b.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;a href=&quot;https://cloud.githubusercontent.com/assets/754514/14509714/61a89708-01d6-11e6-8fcd-74b002a060df.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/754514/14509714/61a89708-01d6-11e6-8fcd-74b002a060df.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Screenshots of Moon Theme&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;figure class=&quot;half&quot;&gt;
    
    &lt;a href=&quot;https://cloud.githubusercontent.com/assets/754514/14509718/61b09a20-01d6-11e6-8da1-4202ae4d83cd.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/754514/14509718/61b09a20-01d6-11e6-8da1-4202ae4d83cd.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;a href=&quot;https://cloud.githubusercontent.com/assets/754514/14509715/61aa9d00-01d6-11e6-81a6-c6837edf2e84.png&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/754514/14509715/61aa9d00-01d6-11e6-81a6-c6837edf2e84.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Moon Theme on Small Screen Size&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;See a &lt;a href=&quot;http://taylantatli.github.io/Moon&quot;&gt;live version of Moon&lt;/a&gt; hosted on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;site-setup&quot;&gt;Site Setup&lt;/h2&gt;
&lt;p&gt;A quick checklist of the files you’ll want to edit to get up and running.&lt;/p&gt;

&lt;h3 id=&quot;site-wide-configuration&quot;&gt;Site Wide Configuration&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; is your friend. Open it up and personalize it. Most variables are self explanatory but here’s an explanation of each if needed:&lt;/p&gt;

&lt;h4 id=&quot;title&quot;&gt;title&lt;/h4&gt;

&lt;p&gt;The title of your site… shocker!&lt;/p&gt;

&lt;p&gt;Example &lt;code class=&quot;highlighter-rouge&quot;&gt;title: My Awesome Site&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;bio&quot;&gt;bio&lt;/h4&gt;

&lt;p&gt;The description to show on your homepage.&lt;/p&gt;

&lt;h4 id=&quot;description&quot;&gt;description&lt;/h4&gt;

&lt;p&gt;The description to use for meta tags and navigation menu.&lt;/p&gt;

&lt;h4 id=&quot;url&quot;&gt;url&lt;/h4&gt;

&lt;p&gt;Used to generate absolute urls in &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;feed.xml&lt;/code&gt;, and for generating canonical URLs in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;. When developing locally either comment this out or use something like &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4000&lt;/code&gt; so all assets load properly. &lt;em&gt;Don’t include a trailing &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://taylantatli.me/Moon&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:4000&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;//cooldude.github.io&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;reading_time&quot;&gt;reading_time&lt;/h4&gt;

&lt;p&gt;Set true to show reading time for posts. And set &lt;code class=&quot;highlighter-rouge&quot;&gt;words_per_minute&lt;/code&gt;, default is 200.&lt;/p&gt;

&lt;h4 id=&quot;logo&quot;&gt;logo&lt;/h4&gt;
&lt;p&gt;Your site’s logo. It will show on homepage and navigation menu. Also used for twitter meta tags.&lt;/p&gt;

&lt;h4 id=&quot;background&quot;&gt;background&lt;/h4&gt;
&lt;p&gt;Image for background. If you don’t set it, color will be used as a background.&lt;/p&gt;

&lt;h4 id=&quot;google-analytics-and-webmaster-tools&quot;&gt;Google Analytics and Webmaster Tools&lt;/h4&gt;

&lt;p&gt;Google Analytics UA and Webmaster Tool verification tags can be entered in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;. For more information on obtaining these meta tags check &lt;a href=&quot;http://support.google.com/webmasters/bin/answer.py?hl=en&amp;amp;answer=35179&quot;&gt;Google Webmaster Tools&lt;/a&gt; and &lt;a href=&quot;https://ssl.bing.com/webmaster/configure/verify/ownership&quot;&gt;Bing Webmaster Tools&lt;/a&gt; support.&lt;/p&gt;

&lt;h4 id=&quot;mathjax&quot;&gt;MathJax&lt;/h4&gt;
&lt;p&gt;It’s enabled. But if you don’t want to use it. Set it false in  &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;disqus-comments&quot;&gt;Disqus Comments&lt;/h4&gt;
&lt;p&gt;Set your disqus shortname in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; to use comments.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;navigation-links&quot;&gt;Navigation Links&lt;/h3&gt;

&lt;p&gt;To set what links appear in the top navigation edit &lt;code class=&quot;highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt;. Use the following format to set the URL and title for as many links as you’d like. &lt;em&gt;External links will open in a new window.&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Home&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Blog&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/post/&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Projects&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/projects/&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;About&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/about/&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Moon&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://taylantatli.me/Moon&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;layouts-and-content&quot;&gt;Layouts and Content&lt;/h2&gt;

&lt;p&gt;Moon Theme use &lt;a href=&quot;https://github.com/penibelst/jekyll-compress-html&quot;&gt;Jekyll Compress&lt;/a&gt; to compress html output. But it can cause errors if you use “linenos” (line numbers). I suggest don’t use line numbers for codes, because it won’t look good with this theme, also i didn’t give a proper style for them. If you insist to use line numbers, just remove &lt;code class=&quot;highlighter-rouge&quot;&gt;layout: compress&lt;/code&gt; string from layouts. It will disable compressing.&lt;/p&gt;

&lt;h3 id=&quot;feature-image&quot;&gt;Feature Image&lt;/h3&gt;

&lt;p&gt;You can set feature image per post. Just add &lt;code class=&quot;highlighter-rouge&quot;&gt;feature: some link&lt;/code&gt; to your post’s front matter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;feature: /assets/img/some-image.png
or
feaure: http://example.com/some-image.png
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This also will be used for twitter card:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/754514/14509719/61c5751c-01d6-11e6-8c29-ce8ccad149bf.png&quot; alt=&quot;Moon Twitter Card&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;/h3&gt;
&lt;p&gt;To show disqus comments for your post add &lt;code class=&quot;highlighter-rouge&quot;&gt;comments: true&lt;/code&gt; to your post’s front matter.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;questions&quot;&gt;Questions?&lt;/h2&gt;

&lt;p&gt;Found a bug or aren’t quite sure how something works? By all means &lt;a href=&quot;https://github.com/TaylanTatli/Moon/issues/new&quot;&gt;file a GitHub Issue&lt;/a&gt;. And if you make something cool with this theme feel free to let me know.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;This theme is free and open source software, distributed under the MIT License. So feel free to use this Jekyll theme on your site without linking back to me or including a disclaimer.&lt;/p&gt;</content><category term="jekyll" /><category term="moon" /><category term="blog" /><category term="about" /><category term="theme" /><summary type="html">Minimal, one column Jekyll theme for your blog.</summary></entry></feed>
